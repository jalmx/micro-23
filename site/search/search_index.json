{"config":{"indexing":"full","lang":["es"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programa Tarjetas Electr\u00f3nicas de control para sistemas Mecatr\u00f3nicos 2023 Documentaci\u00f3n para el aprendizaje del Lenguaje C con un enfoque b\u00e1sico para quien no ha programado pero tiene nociones de algoritmos, y ahora tendr\u00e1 que aplicar ese conocimiento a un lenguaje en una tarjeta de control, en este caso para ESP32 con Arduino. Mapa del sitio pendiente","title":"Programa Tarjetas"},{"location":"#programa-tarjetas-electronicas-de-control-para-sistemas-mecatronicos-2023","text":"Documentaci\u00f3n para el aprendizaje del Lenguaje C con un enfoque b\u00e1sico para quien no ha programado pero tiene nociones de algoritmos, y ahora tendr\u00e1 que aplicar ese conocimiento a un lenguaje en una tarjeta de control, en este caso para ESP32 con Arduino.","title":"Programa Tarjetas Electr\u00f3nicas de control para sistemas Mecatr\u00f3nicos 2023"},{"location":"#mapa-del-sitio","text":"pendiente","title":"Mapa del sitio"},{"location":"Referencias/","text":"Referencias https://cplusplus.com/reference/ https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-devkitc.html#get-started-esp32-devkitc-board-front Datasheet","title":"Referencias"},{"location":"Referencias/#referencias","text":"https://cplusplus.com/reference/ https://docs.espressif.com/projects/arduino-esp32/en/latest/getting_started.html https://docs.espressif.com/projects/esp-idf/en/latest/esp32/hw-reference/esp32/get-started-devkitc.html#get-started-esp32-devkitc-board-front Datasheet","title":"Referencias"},{"location":"Capitulo%201/","text":"Cap\u00edtulo 1 Introducci\u00f3n al Lenguaje C De las cosas importantes que debemos saber del lenguaje C es que es unos los principales lenguajes que existen hoy en d\u00eda. Es la base de la mayor\u00eda de los lenguajes de alto nivel, por ejemplo JAVA, Python, est\u00e1n hechos con este lenguaje. Infinidad de aplicaciones y herramientas est\u00e1n realizadas con dicho lenguaje. El kernel de Linux esta escrito en C . De las cosas importantes a destacar son: Los archivos tienen la extension .c y .h . Es un lenguaje compilado Es un lenguaje tipado. Te permite una manipulaci\u00f3n libre de la memoria En extremo flexible Mapa del sitio Nota importante!!! En caso de no saber algoritmos, primero ir al sitio de Algoritmos para aprender y conocer, dado que aqu\u00ed te toma como que usted ya tiene ese conocimiento previo.","title":"Introducci\u00f3n al Lenguaje C"},{"location":"Capitulo%201/#capitulo-1","text":"","title":"Cap\u00edtulo 1"},{"location":"Capitulo%201/#introduccion-al-lenguaje-c","text":"De las cosas importantes que debemos saber del lenguaje C es que es unos los principales lenguajes que existen hoy en d\u00eda. Es la base de la mayor\u00eda de los lenguajes de alto nivel, por ejemplo JAVA, Python, est\u00e1n hechos con este lenguaje. Infinidad de aplicaciones y herramientas est\u00e1n realizadas con dicho lenguaje. El kernel de Linux esta escrito en C . De las cosas importantes a destacar son: Los archivos tienen la extension .c y .h . Es un lenguaje compilado Es un lenguaje tipado. Te permite una manipulaci\u00f3n libre de la memoria En extremo flexible","title":"Introducci\u00f3n al Lenguaje C"},{"location":"Capitulo%201/#mapa-del-sitio","text":"","title":"Mapa del sitio"},{"location":"Capitulo%201/#nota-importante","text":"En caso de no saber algoritmos, primero ir al sitio de Algoritmos para aprender y conocer, dado que aqu\u00ed te toma como que usted ya tiene ese conocimiento previo.","title":"Nota importante!!!"},{"location":"Capitulo%201/01_variables/","text":"Variables \u00bfQu\u00e9 es una variable? Una variable desde el punto de vista computacional, es un espacio en memoria con un nombre, es decir, un espacio determinado al momento de declarar la variable, se indica su tipo y cada tipo tiene cierto espacio en memoria. Es un espacio virtual el cual quedar\u00e1 registrado en la memoria; el cual se podr\u00e1 llamar en diferentes puntos de la programaci\u00f3n cuantas veces la necesitemos. A este espacio se le da un nombre que nos indique para qu\u00e9 ha sido creada. Las variables pueden tomar cualquier tipo de valor Variables int edad = 20 ; //Variable que almacena un numero, la edad float altura = 1.7 ; char letra = 'a' ; char * nombre = \"Aprendiendo programaci\u00f3n\" ; //Variable que almacena una frase (String) bool isAlive = true //Variable que almacena un valor booleano Qu\u00e9 es declarar una variable? La declaraci\u00f3n de una variable es reservar un espacio en memoria de la computadora . La computadora tiene cierta cantidad de memoria, la cual es repartida entre todos los programas y los propios procesos para ejecutar el sistema operativo. Cuando ejecutamos un programa, \u00e9ste comienza reservar memoria para poder trabajar. Entonces, al declarar variables estamos consumiendo memoria, la cual vamos a utilizar en alg\u00fan momento, si estamos reservando el espacio significa que en alg\u00fan otro momento necesitamos recuperar lo que hemos guardado para realizar otra operaci\u00f3n, de lo contrario no necesitamos reservar memoria si el valor solo ser\u00e1 utilizado una \u00fanica vez. \u00bfC\u00f3mo nombrar una variable? Dentro de la programaci\u00f3n existen buenas practicas para declarar variables. Estas reglas se definen a lo largo del tiempo que ha evolucionado. Estas son las reglas gen\u00e9ricas para (casi) todos lenguajes. Deben comenzar en min\u00fascula Se escriben en min\u00fasculas, las variantes se dan cuando son m\u00e1s de dos palabras. Solo puede contener n\u00fameros despu\u00e9s de la primera letra. Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada variable1 y otra llamada Variable1 , para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta. No pueden contener espacios entre letras o palabras No puede comenzar con n\u00fameros o s\u00edmbolos No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: !\"\u00b7%&-+/()=?\u00bf... , los \u00fanicos s\u00edmbolos permitidos son $ y _ . El nombre debe ser descriptivo ; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada (Regla especial): Todo de escribe en ingles. (Regla especial) : Si se desea escribir una variable combinando dos palabras o m\u00e1s, se hace comenzando la siguiente palabra con mayuscula y todo pegado, a esto se le conoce como la convenci\u00f3n CamelCase . Ejemplos: valor valor1 valorUno variableNueva","title":"Variables"},{"location":"Capitulo%201/01_variables/#variables","text":"","title":"Variables"},{"location":"Capitulo%201/01_variables/#que-es-una-variable","text":"Una variable desde el punto de vista computacional, es un espacio en memoria con un nombre, es decir, un espacio determinado al momento de declarar la variable, se indica su tipo y cada tipo tiene cierto espacio en memoria. Es un espacio virtual el cual quedar\u00e1 registrado en la memoria; el cual se podr\u00e1 llamar en diferentes puntos de la programaci\u00f3n cuantas veces la necesitemos. A este espacio se le da un nombre que nos indique para qu\u00e9 ha sido creada. Las variables pueden tomar cualquier tipo de valor Variables int edad = 20 ; //Variable que almacena un numero, la edad float altura = 1.7 ; char letra = 'a' ; char * nombre = \"Aprendiendo programaci\u00f3n\" ; //Variable que almacena una frase (String) bool isAlive = true //Variable que almacena un valor booleano","title":"\u00bfQu\u00e9 es una variable?"},{"location":"Capitulo%201/01_variables/#que-es-declarar-una-variable","text":"La declaraci\u00f3n de una variable es reservar un espacio en memoria de la computadora . La computadora tiene cierta cantidad de memoria, la cual es repartida entre todos los programas y los propios procesos para ejecutar el sistema operativo. Cuando ejecutamos un programa, \u00e9ste comienza reservar memoria para poder trabajar. Entonces, al declarar variables estamos consumiendo memoria, la cual vamos a utilizar en alg\u00fan momento, si estamos reservando el espacio significa que en alg\u00fan otro momento necesitamos recuperar lo que hemos guardado para realizar otra operaci\u00f3n, de lo contrario no necesitamos reservar memoria si el valor solo ser\u00e1 utilizado una \u00fanica vez.","title":"Qu\u00e9 es declarar una variable?"},{"location":"Capitulo%201/01_variables/#como-nombrar-una-variable","text":"Dentro de la programaci\u00f3n existen buenas practicas para declarar variables. Estas reglas se definen a lo largo del tiempo que ha evolucionado. Estas son las reglas gen\u00e9ricas para (casi) todos lenguajes. Deben comenzar en min\u00fascula Se escriben en min\u00fasculas, las variantes se dan cuando son m\u00e1s de dos palabras. Solo puede contener n\u00fameros despu\u00e9s de la primera letra. Sensibles a min\u00fasculas y may\u00fasculas; es decir, si declaro una variable llamada variable1 y otra llamada Variable1 , para la computadora son variables o espacios de memoria distintos, aun que suenen igual, con el solo hecho de cambiar una letra, ya estamos hablando de una variable distinta. No pueden contener espacios entre letras o palabras No puede comenzar con n\u00fameros o s\u00edmbolos No puede contener caracteres especiales, todos son caracteres especiales menos el abecedario ingles. Ejemplo: !\"\u00b7%&-+/()=?\u00bf... , los \u00fanicos s\u00edmbolos permitidos son $ y _ . El nombre debe ser descriptivo ; es decir, con solo leerlo podemos deducir qu\u00e9 hace o para qu\u00e9 fue declarada (Regla especial): Todo de escribe en ingles. (Regla especial) : Si se desea escribir una variable combinando dos palabras o m\u00e1s, se hace comenzando la siguiente palabra con mayuscula y todo pegado, a esto se le conoce como la convenci\u00f3n CamelCase . Ejemplos: valor valor1 valorUno variableNueva","title":"\u00bfC\u00f3mo nombrar una variable?"},{"location":"Capitulo%201/02_tipos_datos/","text":"Tipos de datos Los tipos de datos son la manera en la que vamos a decirle al programa el tama\u00f1o de la variable y al mismo momento Nombre Tipo Tama\u00f1o Rango byte byte 8 bits = 1 byte -128 a 127 o 0 a 255 Car\u00e1cter sin signo unsigned char 1 byte 0 hasta 255 Car\u00e1cter con signo char 1 byte -128 hasta 127 Entero corto sin signo unsigned short int o unsigned short 2 bytes 0 a 65,535 Entero corto con signo short int 2 bytes -32,768 a +32,767 Entero con signo int 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo long int 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo sin signo long long int 8 bytes 9,223,372,036,854,775,808 al +9,223,372,036,854,775,807 Flotante float 4 bytes -3.4\u00b3\u2078 al +3.4\u00b3\u2078 Doble double 8 bytes -1.7\u00b3\u2070\u2078 al +1.7\u00b3\u2070\u2078 Doble largo long double 12 bytes -1.9\u2074\u2079\u00b3\u00b2 al +1.9\u2074\u2079\u00b3\u00b2 Nota El tipo de dato que aplicara esta en funci\u00f3n de que tan grande sera el valor que contendr\u00e1. Es decir, si el valor no pasar\u00e1 de 255 y entero, podemos usar un tipo char , pero si el valor que podr\u00e1 ser hasta 1,000,000 pues seleccionamos el tipo long int . char i = 0 ; int valor = 20000 ; float altura = 1.8 ; Comentarios Siempre que escribimos un c\u00f3digo queremos colocar un comentario con respecto a lo que hace el programa o dejarnos una nota para nuestro yo del futuro, obviamente estos comentarios no le interesa al compilador o al programa, es para nosotros. Hay dos maneras de indicar un comentario, que son comentarios en l\u00ednea o multil\u00ednea Comentarios de una sola l\u00ednea La forma de indicar un comentario de una l\u00ednea es usando doble diagonal hacia adelante ( // ). // comentario de una l\u00ednea int edad = 3 ; // //en esta variable guardo el valor de 3 Todo lo que se escribe delante de // el compilador lo comienza a tomar como comentario, aun asi tenga c\u00f3digo correcto y propio del lenguaje, dado que al saber que es un comentario lo va a ignorar. Comentarios multil\u00ednea La forma de indicar un comentario multi l\u00ednea es envolverlo con una diagonal con un asterisco y cierra con un asterisco y una diagonal ( /**/ ). Una de las ventajas es que se puede colocar codigo en cualquier parte sin ser parte del codigo. /* * En esta secci\u00f3n se toma como un bloque de comentario * Todo lo que esta escrito el compilador lo ignora porque * es una indicaci\u00f3n para nosotros */ int valor = 5 ; /*tambi\u00e9n se puede ocupar como de una l\u00ednea, lo importante es que este envuelto entre los s\u00edmbolos correspondientes*/ float /*tipo de variable*/ altura /*nombre de variable*/ = 1.782 ;","title":"Tipos de datos"},{"location":"Capitulo%201/02_tipos_datos/#tipos-de-datos","text":"Los tipos de datos son la manera en la que vamos a decirle al programa el tama\u00f1o de la variable y al mismo momento Nombre Tipo Tama\u00f1o Rango byte byte 8 bits = 1 byte -128 a 127 o 0 a 255 Car\u00e1cter sin signo unsigned char 1 byte 0 hasta 255 Car\u00e1cter con signo char 1 byte -128 hasta 127 Entero corto sin signo unsigned short int o unsigned short 2 bytes 0 a 65,535 Entero corto con signo short int 2 bytes -32,768 a +32,767 Entero con signo int 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo long int 4 bytes -2,147,483,648 a +2,147,483,647 Entero largo sin signo long long int 8 bytes 9,223,372,036,854,775,808 al +9,223,372,036,854,775,807 Flotante float 4 bytes -3.4\u00b3\u2078 al +3.4\u00b3\u2078 Doble double 8 bytes -1.7\u00b3\u2070\u2078 al +1.7\u00b3\u2070\u2078 Doble largo long double 12 bytes -1.9\u2074\u2079\u00b3\u00b2 al +1.9\u2074\u2079\u00b3\u00b2 Nota El tipo de dato que aplicara esta en funci\u00f3n de que tan grande sera el valor que contendr\u00e1. Es decir, si el valor no pasar\u00e1 de 255 y entero, podemos usar un tipo char , pero si el valor que podr\u00e1 ser hasta 1,000,000 pues seleccionamos el tipo long int . char i = 0 ; int valor = 20000 ; float altura = 1.8 ;","title":"Tipos de datos"},{"location":"Capitulo%201/02_tipos_datos/#comentarios","text":"Siempre que escribimos un c\u00f3digo queremos colocar un comentario con respecto a lo que hace el programa o dejarnos una nota para nuestro yo del futuro, obviamente estos comentarios no le interesa al compilador o al programa, es para nosotros. Hay dos maneras de indicar un comentario, que son comentarios en l\u00ednea o multil\u00ednea","title":"Comentarios"},{"location":"Capitulo%201/02_tipos_datos/#comentarios-de-una-sola-linea","text":"La forma de indicar un comentario de una l\u00ednea es usando doble diagonal hacia adelante ( // ). // comentario de una l\u00ednea int edad = 3 ; // //en esta variable guardo el valor de 3 Todo lo que se escribe delante de // el compilador lo comienza a tomar como comentario, aun asi tenga c\u00f3digo correcto y propio del lenguaje, dado que al saber que es un comentario lo va a ignorar.","title":"Comentarios de una sola l\u00ednea"},{"location":"Capitulo%201/02_tipos_datos/#comentarios-multilinea","text":"La forma de indicar un comentario multi l\u00ednea es envolverlo con una diagonal con un asterisco y cierra con un asterisco y una diagonal ( /**/ ). Una de las ventajas es que se puede colocar codigo en cualquier parte sin ser parte del codigo. /* * En esta secci\u00f3n se toma como un bloque de comentario * Todo lo que esta escrito el compilador lo ignora porque * es una indicaci\u00f3n para nosotros */ int valor = 5 ; /*tambi\u00e9n se puede ocupar como de una l\u00ednea, lo importante es que este envuelto entre los s\u00edmbolos correspondientes*/ float /*tipo de variable*/ altura /*nombre de variable*/ = 1.782 ;","title":"Comentarios multil\u00ednea"},{"location":"Capitulo%201/03_declaracion_de_variables/","text":"\u00bfC\u00f3mo se declaran las variables ? Cada lenguaje tiene su sintaxis de declaraci\u00f3n de variables, en nuestro que es lenguaje C , es la siguiente manera: Sintaxis: tipoDeDato nombreVariable = valor ; Ejemplos: int edad = 10 ; float altura = 1.4 ; char letra = 'a' ; bool isLleno = true ; // se debe importar el header <stdbool.h> char * nombre = \"Programacion en C\" ; int myDec = 50 /* notaci\u00f3n decimal */ int myOct = 062 ; /* notaci\u00f3n octal (0) */ int myHex = 0x32 ; /* notaci\u00f3n hexadecimal (0x) */ A continuaci\u00f3n se muestra todas las partes de declaraci\u00f3n de variable: Declaraci\u00f3n de constantes En ocasiones necesitamos declarar una variable que nunca cambie su valor, para eso existe que se vuelva constante, en el caso de C , se cuenta con la palabra reservada const al momento de declarar la variable. Esto lo que hace que una vez sea declarada, nunca mas podr\u00e1 cambiar su valor. La forma de declarar una constante es la siguiente: const tipo_de_dato NOMBRE = valor ; Observe que ahora la convenci\u00f3n de Camel Case indica que una constante debe ser nombrada en may\u00fasculas, en caso de contar con mas de 2 palabras se van separando con guion bajo ( _ ). Con ello, al momento de verla sabremos que es una constante y ese valor no se puede modificar. const float PI = 3.141592 ; // declaramos la constante de pi const MAYOR_DE_EDAD = 18 ; // declaramos el valor para una constante para comprar cuando sea mayor de edad, este valor pues nunca cambiara Nota Existe otra manera en cierta manera mas adecuada de definir constantes que se vera mas adelante (Spoiler: Es un preprocesador ( #define ))","title":"Declaraci\u00f3n de variables"},{"location":"Capitulo%201/03_declaracion_de_variables/#como-se-declaran-las-variables","text":"Cada lenguaje tiene su sintaxis de declaraci\u00f3n de variables, en nuestro que es lenguaje C , es la siguiente manera: Sintaxis: tipoDeDato nombreVariable = valor ; Ejemplos: int edad = 10 ; float altura = 1.4 ; char letra = 'a' ; bool isLleno = true ; // se debe importar el header <stdbool.h> char * nombre = \"Programacion en C\" ; int myDec = 50 /* notaci\u00f3n decimal */ int myOct = 062 ; /* notaci\u00f3n octal (0) */ int myHex = 0x32 ; /* notaci\u00f3n hexadecimal (0x) */ A continuaci\u00f3n se muestra todas las partes de declaraci\u00f3n de variable:","title":"\u00bfC\u00f3mo se declaran las variables ?"},{"location":"Capitulo%201/03_declaracion_de_variables/#declaracion-de-constantes","text":"En ocasiones necesitamos declarar una variable que nunca cambie su valor, para eso existe que se vuelva constante, en el caso de C , se cuenta con la palabra reservada const al momento de declarar la variable. Esto lo que hace que una vez sea declarada, nunca mas podr\u00e1 cambiar su valor. La forma de declarar una constante es la siguiente: const tipo_de_dato NOMBRE = valor ; Observe que ahora la convenci\u00f3n de Camel Case indica que una constante debe ser nombrada en may\u00fasculas, en caso de contar con mas de 2 palabras se van separando con guion bajo ( _ ). Con ello, al momento de verla sabremos que es una constante y ese valor no se puede modificar. const float PI = 3.141592 ; // declaramos la constante de pi const MAYOR_DE_EDAD = 18 ; // declaramos el valor para una constante para comprar cuando sea mayor de edad, este valor pues nunca cambiara Nota Existe otra manera en cierta manera mas adecuada de definir constantes que se vera mas adelante (Spoiler: Es un preprocesador ( #define ))","title":"Declaraci\u00f3n de constantes"},{"location":"Capitulo%201/04_estructura_archivo/","text":"Estructura de archivo C b\u00e1sica De primera instancia si nunca haz programado es muy extra\u00f1o ver muchas cosas en un archivo que pr\u00e1cticamente no hace nada; sin embargo, debemos asimilarlo y tomarlo como una verdad absoluta, dado que para entenderlo hay que recorrer un poco el camino, hasta que cada linea toma todo el sentido del mundo. Con esto pasamos a ver la estructura base que llevara casi todos los archivo en C y mas los que comenzaremos a hacer // nombre del archivo debe ser main.c #include <stdio.h> // funci\u00f3n main int main ( void ){ // inicia funci\u00f3n main // aqu\u00ed va todo nuestro c\u00f3digo return 0 ; // el valor de retorno de la funci\u00f3n main } // termina la funci\u00f3n main La estructura anterior por el momento SIEMPRE se escribir\u00e1 as\u00ed, sin preguntar nada y respetando cada s\u00edmbolo en \u00e9l. Por convenci\u00f3n el nombre del archivo en donde va la funci\u00f3n main se llamar\u00e1 main.c . La extension de los archivos en C, es .c ; posteriormente aprenderemos que hay otras y tienen otro motivo. Warning Por el momento no se escribir\u00e1 NADA de NADA fuera de las llaves de la funci\u00f3n, esta estrictamente prohibido colocar algo (ya prenderemos d\u00f3nde, c\u00f3mo y porqu\u00e9) . Por el momento ten f\u00e9 ciega \ud83d\ude04. Sintaxis La sintaxis en un lenguaje es como saber las reglas ortogr\u00e1fica de cualquier idioma. Cada lenguaje de programaci\u00f3n tiene la suya, en este caso en C tiene sus reglas: // main.c #include <stdio.h> // funci\u00f3n main int main ( void ){ printf ( \"Hola Mundo\" ); return 0 ; }","title":"Estructura de archivo C b\u00e1sica"},{"location":"Capitulo%201/04_estructura_archivo/#estructura-de-archivo-c-basica","text":"De primera instancia si nunca haz programado es muy extra\u00f1o ver muchas cosas en un archivo que pr\u00e1cticamente no hace nada; sin embargo, debemos asimilarlo y tomarlo como una verdad absoluta, dado que para entenderlo hay que recorrer un poco el camino, hasta que cada linea toma todo el sentido del mundo. Con esto pasamos a ver la estructura base que llevara casi todos los archivo en C y mas los que comenzaremos a hacer // nombre del archivo debe ser main.c #include <stdio.h> // funci\u00f3n main int main ( void ){ // inicia funci\u00f3n main // aqu\u00ed va todo nuestro c\u00f3digo return 0 ; // el valor de retorno de la funci\u00f3n main } // termina la funci\u00f3n main La estructura anterior por el momento SIEMPRE se escribir\u00e1 as\u00ed, sin preguntar nada y respetando cada s\u00edmbolo en \u00e9l. Por convenci\u00f3n el nombre del archivo en donde va la funci\u00f3n main se llamar\u00e1 main.c . La extension de los archivos en C, es .c ; posteriormente aprenderemos que hay otras y tienen otro motivo. Warning Por el momento no se escribir\u00e1 NADA de NADA fuera de las llaves de la funci\u00f3n, esta estrictamente prohibido colocar algo (ya prenderemos d\u00f3nde, c\u00f3mo y porqu\u00e9) . Por el momento ten f\u00e9 ciega \ud83d\ude04.","title":"Estructura de archivo C b\u00e1sica"},{"location":"Capitulo%201/04_estructura_archivo/#sintaxis","text":"La sintaxis en un lenguaje es como saber las reglas ortogr\u00e1fica de cualquier idioma. Cada lenguaje de programaci\u00f3n tiene la suya, en este caso en C tiene sus reglas: // main.c #include <stdio.h> // funci\u00f3n main int main ( void ){ printf ( \"Hola Mundo\" ); return 0 ; }","title":"Sintaxis"},{"location":"Capitulo%201/05_salida_datos/","text":"Salida de datos (funci\u00f3n printf) Lo primero que aprenderemos es como mandar mensajes a la consola o terminal, y es utilizando la funci\u00f3n printf(); . Como se muestra en el siguiente ejemplo: // main.c #include <stdio.h> // se debe importar la librer\u00eda est\u00e1ndar de entradas y salidas para poder usar printf, de lo contrario marcara un error al compilar // funci\u00f3n main int main ( void ){ printf ( \"Hola Mundo\" ); return 0 ; } La funci\u00f3n printf nos sirve para mandar informaci\u00f3n a la consola, tiene manera especiales para escribir los tipos de datos y ademas tiene caracteres especiales que se detallan a continuaci\u00f3n. Secuencias de escape Las secuencias de escape son caracteres especiales para printf , que no se puden colocar de manera cotidiana porque para C significa otra cosa, por lo tanto, dicho car\u00e1cter se debe escapar ; es decir, agregar un back slash al principio \\ . S\u00edmbolo Significado \\n Linea nueva - Enter \\t un tabulador \\r Regresa el cursor al inicio - Retorno de carro \\\\ Back slash \\\" Dobles Comillas \\' Comillas simple Ejemplos con secuencias de escape Aplicando las secuencias de escape printf ( \"Hola \\n Mundo\" ); Hola Mundo printf ( \"Hola \\t Mundo\" ); Hola Mundo printf ( \" \\\" Hola Mundo \\\" \" ); \"Hola Mundo\" printf ( \" \\' Hola Mundo \\' \" ); 'Hola Mundo' Especific\u00e1dores de formato En C no se puede mandar a imprimir de manera directa una variable, se de usar un especificador de formato adecuado al tipo de variable que se quiere mandar a la salida. Se debe utilizar el s\u00edmbolo de % seguido de la letra que le corresponde al tipo de variable: Especificador de formato Tipo de variable Nombre %i , %d int , short N\u00famero entero %f float N\u00famero real %c char Car\u00e1cter %o int Octal %x int Hexadecimal %i char El valor ASCII del car\u00e1cter %s string . char* , char[] Cadena de caracteres %Lf long double Flotante doble largo %lld long long int Entero largo %u unsigned char , unsigned short , unsigned int Enteros sin signo %lu unsigned long int Entero sin signo %llu unsigned long long int Entero sin signo %p * Direcci\u00f3n de puntero uint8_t valor = 2 ; int edad = 13 ; float altura = 1.73 ; char arroba = '@' ; char * frase = \"Hola Mundo\" ; printf ( \"%i \\n \" , edad ); printf ( \"%f \\n \" , altura ); printf ( \"%c \\n \" , arroba ); printf ( \"%s \\n \" , frase ); printf ( \"%d \\n \" , valor ); 13 1.730000 @ Hola Mundo 2","title":"Salida de datos (funci\u00f3n printf)"},{"location":"Capitulo%201/05_salida_datos/#salida-de-datos-funcion-printf","text":"Lo primero que aprenderemos es como mandar mensajes a la consola o terminal, y es utilizando la funci\u00f3n printf(); . Como se muestra en el siguiente ejemplo: // main.c #include <stdio.h> // se debe importar la librer\u00eda est\u00e1ndar de entradas y salidas para poder usar printf, de lo contrario marcara un error al compilar // funci\u00f3n main int main ( void ){ printf ( \"Hola Mundo\" ); return 0 ; } La funci\u00f3n printf nos sirve para mandar informaci\u00f3n a la consola, tiene manera especiales para escribir los tipos de datos y ademas tiene caracteres especiales que se detallan a continuaci\u00f3n.","title":"Salida de datos (funci\u00f3n printf)"},{"location":"Capitulo%201/05_salida_datos/#secuencias-de-escape","text":"Las secuencias de escape son caracteres especiales para printf , que no se puden colocar de manera cotidiana porque para C significa otra cosa, por lo tanto, dicho car\u00e1cter se debe escapar ; es decir, agregar un back slash al principio \\ . S\u00edmbolo Significado \\n Linea nueva - Enter \\t un tabulador \\r Regresa el cursor al inicio - Retorno de carro \\\\ Back slash \\\" Dobles Comillas \\' Comillas simple","title":"Secuencias de escape"},{"location":"Capitulo%201/05_salida_datos/#ejemplos-con-secuencias-de-escape","text":"Aplicando las secuencias de escape printf ( \"Hola \\n Mundo\" ); Hola Mundo printf ( \"Hola \\t Mundo\" ); Hola Mundo printf ( \" \\\" Hola Mundo \\\" \" ); \"Hola Mundo\" printf ( \" \\' Hola Mundo \\' \" ); 'Hola Mundo'","title":"Ejemplos con secuencias de escape"},{"location":"Capitulo%201/05_salida_datos/#especificadores-de-formato","text":"En C no se puede mandar a imprimir de manera directa una variable, se de usar un especificador de formato adecuado al tipo de variable que se quiere mandar a la salida. Se debe utilizar el s\u00edmbolo de % seguido de la letra que le corresponde al tipo de variable: Especificador de formato Tipo de variable Nombre %i , %d int , short N\u00famero entero %f float N\u00famero real %c char Car\u00e1cter %o int Octal %x int Hexadecimal %i char El valor ASCII del car\u00e1cter %s string . char* , char[] Cadena de caracteres %Lf long double Flotante doble largo %lld long long int Entero largo %u unsigned char , unsigned short , unsigned int Enteros sin signo %lu unsigned long int Entero sin signo %llu unsigned long long int Entero sin signo %p * Direcci\u00f3n de puntero uint8_t valor = 2 ; int edad = 13 ; float altura = 1.73 ; char arroba = '@' ; char * frase = \"Hola Mundo\" ; printf ( \"%i \\n \" , edad ); printf ( \"%f \\n \" , altura ); printf ( \"%c \\n \" , arroba ); printf ( \"%s \\n \" , frase ); printf ( \"%d \\n \" , valor ); 13 1.730000 @ Hola Mundo 2","title":"Especific\u00e1dores de formato"},{"location":"Capitulo%201/06_operaciones_aritmeticas/","text":"Operaciones Operadores aritm\u00e9ticos En esta secci\u00f3n veremos los operadores aritm\u00e9ticos b\u00e1sicos que podemos encontrar en la mayor\u00eda de lenguajes. Nombre S\u00edmbolo Descripci\u00f3n Agrupaci\u00f3n () Realiza la operaci\u00f3n de agrupaci\u00f3n de una operaci\u00f3n. (NO MULTIPLICA) Suma + Realiza la operaci\u00f3n de suma aritm\u00e9tica Resta - Realiza la operaci\u00f3n de resta aritm\u00e9tica Multiplicaci\u00f3n * Realiza la operaci\u00f3n de multiplicaci\u00f3n aritm\u00e9tica Divisi\u00f3n / Realiza la operaci\u00f3n de raz\u00f3n aritm\u00e9tica Residuo o M\u00f3dulo % Realiza la operaci\u00f3n de divisi\u00f3n aritm\u00e9tica y devuelve el residuo de \u00e9sta divisi\u00f3n Cuando somos nuevos en el mundo de la programaci\u00f3n queremos aplicar conocimiento que tenemos con relaci\u00f3n a matem\u00e1ticas, aqu\u00ed existen algunas cuestiones que no se aplican de la misma manera o solo se puede aplicar de cierta forma. Precauciones que debemos tener en cuenta son: El \u00fanico s\u00edmbolo que podemos ocupar para la divisi\u00f3n es la diagonal o slash (/), no existe otro s\u00edmbolo ni tampoco se puede ocupar los tradicionales que conocemos. El \u00fanico s\u00edmbolo para multiplicaci\u00f3n es el asterisco (*), no existe alg\u00fan otro ni ninguno m\u00e1s sirve para multiplicar. Los par\u00e9ntesis \"( )\" solo agrupan y nada mas. No sirven para multiplicar . int valor1 = 4 ; int valor2 = 3 ; int suma = valor1 + valor2 ; int resta = valor1 - valor2 ; int multiplicacion = valor1 * valor2 ; int division = valor1 / valor2 ; int modulo = valor1 % valor2 ; printf ( \"La suma es %i \\n \" , suma ); printf ( \"La resta es %i \\n \" , resta ); printf ( \"La multiplicaci\u00f3n es %i \\n \" , multiplicacion ); printf ( \"La divisi\u00f3n es %i \\n \" , division ); printf ( \"El residuo es %i \\n \" , modulo ); Resultado: La suma es 7 La resta es 1 La multiplicaci\u00f3n es 12 La divisi\u00f3n es 1 El residuo es 1 Operador unitario (-) Existe el operador unitario el cual no necesita hacer una operaci\u00f3n entre dos valores o variables, con agregarlo estar\u00eda realizando la operaci\u00f3n de multiplicar por -1. int valor = 4 ; int inverso = - valor ; // aqu\u00ed aplicamos el operador unitario printf ( \"valor: %d \\n \" , valor ); printf ( \"valor negativo: %d \\n \" , inverso ); Resultado: valor: 4 valor negativo: -4 Operador de asignaci\u00f3n (=) El operador de asignaci\u00f3n ( = ), el cual asigna un valor a una variable. Danger No es lo mismo asignar que igualar ; es decir, en programaci\u00f3n se guardar un dato en una direcci\u00f3n de memoria, e igualar se usa en matem\u00e1ticas. Precedencia de operadores En C, la expresiones son normalmente evaluador de izquierda a derecha. Sin embargo, cuando una expresi\u00f3n contiene multiples operadores, la precedencia de decide el orden en el cual ser\u00e1n evaluados. Este orden es aplicable a otros muchos lenguajes como C++, C#, Java. Orden Operador 1 () , [] , . , - , > , x++ , x-- 2 ! , ~ , ++x , --x , (type) sizeof * & 3 * , / , % 4 + , - 5 << , >> 6 < , <= , > , >= 7 == , != 8 & 9 ^ 10 | 11 && 12 || 13 = 14 , Nota Con respecto a las operaciones matem\u00e1ticas que conoces, sigue funcionando igual, ahora debes a\u00f1adir las relacionadas al lenguaje. Ejercicios con operadores aritm\u00e9ticos","title":"Operaciones"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operaciones","text":"","title":"Operaciones"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operadores-aritmeticos","text":"En esta secci\u00f3n veremos los operadores aritm\u00e9ticos b\u00e1sicos que podemos encontrar en la mayor\u00eda de lenguajes. Nombre S\u00edmbolo Descripci\u00f3n Agrupaci\u00f3n () Realiza la operaci\u00f3n de agrupaci\u00f3n de una operaci\u00f3n. (NO MULTIPLICA) Suma + Realiza la operaci\u00f3n de suma aritm\u00e9tica Resta - Realiza la operaci\u00f3n de resta aritm\u00e9tica Multiplicaci\u00f3n * Realiza la operaci\u00f3n de multiplicaci\u00f3n aritm\u00e9tica Divisi\u00f3n / Realiza la operaci\u00f3n de raz\u00f3n aritm\u00e9tica Residuo o M\u00f3dulo % Realiza la operaci\u00f3n de divisi\u00f3n aritm\u00e9tica y devuelve el residuo de \u00e9sta divisi\u00f3n Cuando somos nuevos en el mundo de la programaci\u00f3n queremos aplicar conocimiento que tenemos con relaci\u00f3n a matem\u00e1ticas, aqu\u00ed existen algunas cuestiones que no se aplican de la misma manera o solo se puede aplicar de cierta forma. Precauciones que debemos tener en cuenta son: El \u00fanico s\u00edmbolo que podemos ocupar para la divisi\u00f3n es la diagonal o slash (/), no existe otro s\u00edmbolo ni tampoco se puede ocupar los tradicionales que conocemos. El \u00fanico s\u00edmbolo para multiplicaci\u00f3n es el asterisco (*), no existe alg\u00fan otro ni ninguno m\u00e1s sirve para multiplicar. Los par\u00e9ntesis \"( )\" solo agrupan y nada mas. No sirven para multiplicar . int valor1 = 4 ; int valor2 = 3 ; int suma = valor1 + valor2 ; int resta = valor1 - valor2 ; int multiplicacion = valor1 * valor2 ; int division = valor1 / valor2 ; int modulo = valor1 % valor2 ; printf ( \"La suma es %i \\n \" , suma ); printf ( \"La resta es %i \\n \" , resta ); printf ( \"La multiplicaci\u00f3n es %i \\n \" , multiplicacion ); printf ( \"La divisi\u00f3n es %i \\n \" , division ); printf ( \"El residuo es %i \\n \" , modulo ); Resultado: La suma es 7 La resta es 1 La multiplicaci\u00f3n es 12 La divisi\u00f3n es 1 El residuo es 1","title":"Operadores aritm\u00e9ticos"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operador-unitario-","text":"Existe el operador unitario el cual no necesita hacer una operaci\u00f3n entre dos valores o variables, con agregarlo estar\u00eda realizando la operaci\u00f3n de multiplicar por -1. int valor = 4 ; int inverso = - valor ; // aqu\u00ed aplicamos el operador unitario printf ( \"valor: %d \\n \" , valor ); printf ( \"valor negativo: %d \\n \" , inverso ); Resultado: valor: 4 valor negativo: -4","title":"Operador unitario (-)"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#operador-de-asignacion","text":"El operador de asignaci\u00f3n ( = ), el cual asigna un valor a una variable. Danger No es lo mismo asignar que igualar ; es decir, en programaci\u00f3n se guardar un dato en una direcci\u00f3n de memoria, e igualar se usa en matem\u00e1ticas.","title":"Operador de asignaci\u00f3n (=)"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#precedencia-de-operadores","text":"En C, la expresiones son normalmente evaluador de izquierda a derecha. Sin embargo, cuando una expresi\u00f3n contiene multiples operadores, la precedencia de decide el orden en el cual ser\u00e1n evaluados. Este orden es aplicable a otros muchos lenguajes como C++, C#, Java. Orden Operador 1 () , [] , . , - , > , x++ , x-- 2 ! , ~ , ++x , --x , (type) sizeof * & 3 * , / , % 4 + , - 5 << , >> 6 < , <= , > , >= 7 == , != 8 & 9 ^ 10 | 11 && 12 || 13 = 14 , Nota Con respecto a las operaciones matem\u00e1ticas que conoces, sigue funcionando igual, ahora debes a\u00f1adir las relacionadas al lenguaje.","title":"Precedencia de operadores"},{"location":"Capitulo%201/06_operaciones_aritmeticas/#ejercicios-con-operadores-aritmeticos","text":"","title":"Ejercicios con operadores aritm\u00e9ticos"},{"location":"Capitulo%201/07_entrada_datos_scanf/","text":"Leyendo datos del usuario - Funci\u00f3n scanf() Para ir mejorando nuestros programas, que sean din\u00e1micos y mucho mas funcionales, debemos recibir informaci\u00f3n por parte del usuario. Para ello una manera es leyendo datos de teclado que ingresa el usuario, y esto es lo que nos permite realizar la funci\u00f3n scanf() . Que podr\u00edamos decir que complementa a la funci\u00f3n printf() . En la siguiente imagen se ve como cada parte de la sentencia: En el siguiente ejemplo vemos como quedar\u00eda un c\u00f3digo: int edad = 0 ; printf ( \"Dar el valor de la tu edad\" ); scanf ( \"%d\" , & edad ); //recibo el dato y lo almaceno en edad int edadNueva = edad + 5 ; // hago una operaci\u00f3n con este valor printf ( \"Tu edad en 5 anios sera de: %d\" d , edadNueva ); // Recuerda que los s\u00edmbolos del abecedario ingles no tiene la e\u00f1e, y no podemos poner de manera directa ese s\u00edmbolo especial","title":"Leyendo datos del usuario - Funci\u00f3n scanf()"},{"location":"Capitulo%201/07_entrada_datos_scanf/#leyendo-datos-del-usuario-funcion-scanf","text":"Para ir mejorando nuestros programas, que sean din\u00e1micos y mucho mas funcionales, debemos recibir informaci\u00f3n por parte del usuario. Para ello una manera es leyendo datos de teclado que ingresa el usuario, y esto es lo que nos permite realizar la funci\u00f3n scanf() . Que podr\u00edamos decir que complementa a la funci\u00f3n printf() . En la siguiente imagen se ve como cada parte de la sentencia: En el siguiente ejemplo vemos como quedar\u00eda un c\u00f3digo: int edad = 0 ; printf ( \"Dar el valor de la tu edad\" ); scanf ( \"%d\" , & edad ); //recibo el dato y lo almaceno en edad int edadNueva = edad + 5 ; // hago una operaci\u00f3n con este valor printf ( \"Tu edad en 5 anios sera de: %d\" d , edadNueva ); // Recuerda que los s\u00edmbolos del abecedario ingles no tiene la e\u00f1e, y no podemos poner de manera directa ese s\u00edmbolo especial","title":"Leyendo datos del usuario - Funci\u00f3n scanf()"},{"location":"Capitulo%201/08_decisiones/","text":"Introducci\u00f3n a Decisiones (if) Ya que sabemos como declarar variables (sentencia), imprimir por pantalla, solicitar valores al usuario; debemos hacer m\u00e1s din\u00e1mico nuestro programa, y la primer forma de hacerlo es tomando una decisi\u00f3n (una comparaci\u00f3n). Para esto es la condici\u00f3n if ( si ) o estructura de decision if La sintaxis de la estructura if b\u00e1sica es la siguiente: Operadores de relaci\u00f3n Los operadores de relaci\u00f3n te dan unicamente dos respuesta ( l\u00f3gicas ) si o no , que son equivalentes a true o false (booleano), uno o cero , 1 o 0 (digitales), 0V o 5V (voltaje)respectivamente. Nombre Matem\u00e1ticas Lenguaje C Menor que < < Menor o igual que \u2264 <= Mayor que > > Mayor o igual que \u2265 >= Igual que = == Diferente que \u2260 != Sintaxis de comparaci\u00f3n La forma en la que se escriben las comparaciones es: Izquierda Centro Derecha valor/variable operador valor/variable 5 == 8 a >= b 10 <= x a <= 2 Ejemplos de comparaci\u00f3n Las \u00fanicas comparaciones que se pueden realizar son entre n\u00fameros, con respecto a las letras o car\u00e1cter (\u00fanico), la comparaci\u00f3n es en su valor ASCII , en si los textos no se pueden comparar; sin embargo, aplicado a un lenguaje en concreto esto puede variar. Comparaci\u00f3n Resultado 5 > 8 false 10 > 8 true 20 > 5 false 8 >= 8 true 6 < 8 true 2 <= 8 true 0 == 8 false 1 != -8 true Las comparaciones pueden ser entre variables, obviamente dicha variable debe contener un valor previamente. En este caso las variables tienen este valor: a = 5 b = 2 Comparaci\u00f3n Resultado a > b true a >= b true a < b false a <= b false a == b false a != b true Aplicando la estructura if Ahora veremos c\u00f3digo de ejemplo con la estructura if int edad = 18 ; if ( edad >= 18 ){ // comparamos si la variable edad es mayor o igual a 18, en caso que sea verdadero se mostrara el texto printf ( \"Eres mayor de edad\" ); } if ( edad < 18 ){ // comparamos la variable printf ( \"Eres menor de edad\" ); }","title":"Introducci\u00f3n a Decisiones (if)"},{"location":"Capitulo%201/08_decisiones/#introduccion-a-decisiones-if","text":"Ya que sabemos como declarar variables (sentencia), imprimir por pantalla, solicitar valores al usuario; debemos hacer m\u00e1s din\u00e1mico nuestro programa, y la primer forma de hacerlo es tomando una decisi\u00f3n (una comparaci\u00f3n). Para esto es la condici\u00f3n if ( si ) o estructura de decision if La sintaxis de la estructura if b\u00e1sica es la siguiente:","title":"Introducci\u00f3n a Decisiones (if)"},{"location":"Capitulo%201/08_decisiones/#operadores-de-relacion","text":"Los operadores de relaci\u00f3n te dan unicamente dos respuesta ( l\u00f3gicas ) si o no , que son equivalentes a true o false (booleano), uno o cero , 1 o 0 (digitales), 0V o 5V (voltaje)respectivamente. Nombre Matem\u00e1ticas Lenguaje C Menor que < < Menor o igual que \u2264 <= Mayor que > > Mayor o igual que \u2265 >= Igual que = == Diferente que \u2260 !=","title":"Operadores de relaci\u00f3n"},{"location":"Capitulo%201/08_decisiones/#sintaxis-de-comparacion","text":"La forma en la que se escriben las comparaciones es: Izquierda Centro Derecha valor/variable operador valor/variable 5 == 8 a >= b 10 <= x a <= 2","title":"Sintaxis de comparaci\u00f3n"},{"location":"Capitulo%201/08_decisiones/#ejemplos-de-comparacion","text":"Las \u00fanicas comparaciones que se pueden realizar son entre n\u00fameros, con respecto a las letras o car\u00e1cter (\u00fanico), la comparaci\u00f3n es en su valor ASCII , en si los textos no se pueden comparar; sin embargo, aplicado a un lenguaje en concreto esto puede variar. Comparaci\u00f3n Resultado 5 > 8 false 10 > 8 true 20 > 5 false 8 >= 8 true 6 < 8 true 2 <= 8 true 0 == 8 false 1 != -8 true Las comparaciones pueden ser entre variables, obviamente dicha variable debe contener un valor previamente. En este caso las variables tienen este valor: a = 5 b = 2 Comparaci\u00f3n Resultado a > b true a >= b true a < b false a <= b false a == b false a != b true","title":"Ejemplos de comparaci\u00f3n"},{"location":"Capitulo%201/08_decisiones/#aplicando-la-estructura-if","text":"Ahora veremos c\u00f3digo de ejemplo con la estructura if int edad = 18 ; if ( edad >= 18 ){ // comparamos si la variable edad es mayor o igual a 18, en caso que sea verdadero se mostrara el texto printf ( \"Eres mayor de edad\" ); } if ( edad < 18 ){ // comparamos la variable printf ( \"Eres menor de edad\" ); }","title":"Aplicando la estructura if"},{"location":"Capitulo%201/09/","text":"","title":"09"},{"location":"Capitulo%201/10/","text":"","title":"10"},{"location":"Capitulo%201/11/","text":"","title":"11"},{"location":"Capitulo%201/12/","text":"","title":"12"},{"location":"Capitulo%201/13/","text":"","title":"13"},{"location":"Capitulo%201/14/","text":"","title":"14"},{"location":"Capitulo%201/15/","text":"","title":"15"},{"location":"Capitulo%201/Ejemplos/","text":"Ejemplos Imprimir \"Hola mundo\" Imprimir una frase usando secuencias de escape para que entre palabras se haga un salto de l\u00ednea Sumar 2 n\u00fameros e imprimir el resultado","title":"Ejemplos"},{"location":"Capitulo%201/Ejemplos/#ejemplos","text":"Imprimir \"Hola mundo\" Imprimir una frase usando secuencias de escape para que entre palabras se haga un salto de l\u00ednea Sumar 2 n\u00fameros e imprimir el resultado","title":"Ejemplos"},{"location":"Capitulo%201/Ejercicios/","text":"Ejercicios Convertidor de temperatura de Fahrenheit a Celsius. \\(C=\\frac{5}{9}(F - 32)\\) Ciclos Imprimir una tabla de equivalencia de temperaturas de Celsius y Fahrenheit. Desde 0\u00baC hasta 100\u00baC.","title":"Ejercicios"},{"location":"Capitulo%201/Ejercicios/#ejercicios","text":"Convertidor de temperatura de Fahrenheit a Celsius. \\(C=\\frac{5}{9}(F - 32)\\)","title":"Ejercicios"},{"location":"Capitulo%201/Ejercicios/#ciclos","text":"Imprimir una tabla de equivalencia de temperaturas de Celsius y Fahrenheit. Desde 0\u00baC hasta 100\u00baC.","title":"Ciclos"},{"location":"capitulo2/","text":"Introducci\u00f3n a Arduino con ESP32 Pinout","title":"Introducci\u00f3n a Arduino con ESP32"},{"location":"capitulo2/#introduccion-a-arduino-con-esp32","text":"","title":"Introducci\u00f3n a Arduino con ESP32"},{"location":"capitulo2/#pinout","text":"","title":"Pinout"},{"location":"tags.html","text":"Contents grouped by tag","title":"Tags"},{"location":"tags.html#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"}]}